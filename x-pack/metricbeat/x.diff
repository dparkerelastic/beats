diff --git a/go.mod b/go.mod
index a47bf7ec15..193648d401 100644
--- a/go.mod
+++ b/go.mod
@@ -181,6 +181,7 @@ require (
 	github.com/Azure/azure-sdk-for-go/sdk/storage/azblob v1.4.0
 	github.com/Azure/azure-storage-blob-go v0.15.0
 	github.com/Azure/go-autorest/autorest/adal v0.9.24
+	github.com/PaloAltoNetworks/pango v0.10.2
 	github.com/apache/arrow/go/v14 v14.0.2
 	github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.12
 	github.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.13
diff --git a/go.sum b/go.sum
index ec32ee823d..d9ce04d812 100644
--- a/go.sum
+++ b/go.sum
@@ -215,6 +215,8 @@ github.com/PaesslerAG/gval v1.2.2/go.mod h1:XRFLwvmkTEdYziLdaCeCa5ImcGVrfQbeNUbV
 github.com/PaesslerAG/jsonpath v0.1.0/go.mod h1:4BzmtoM/PI8fPO4aQGIusjGxGir2BzcV0grWtFzq1Y8=
 github.com/PaesslerAG/jsonpath v0.1.1 h1:c1/AToHQMVsduPAa4Vh6xp2U0evy4t8SWp8imEsylIk=
 github.com/PaesslerAG/jsonpath v0.1.1/go.mod h1:lVboNxFGal/VwW6d9JzIy56bUsYAP6tH/x80vjnCseY=
+github.com/PaloAltoNetworks/pango v0.10.2 h1:Tjn6vIzzAq6Dd7N0mDuiP8w8pz8k5W9zz/TTSUQCsQY=
+github.com/PaloAltoNetworks/pango v0.10.2/go.mod h1:GztcRnVLur7G+VFG7Z5ZKNFgScLtsycwPMp1qVebE5g=
 github.com/PuerkitoBio/purell v1.0.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=
 github.com/PuerkitoBio/purell v1.1.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=
 github.com/PuerkitoBio/purell v1.1.1/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=
diff --git a/x-pack/metricbeat/module/panos/client.go b/x-pack/metricbeat/module/panos/client.go
index a781b99871..e01cd941d7 100644
--- a/x-pack/metricbeat/module/panos/client.go
+++ b/x-pack/metricbeat/module/panos/client.go
@@ -6,6 +6,7 @@ package panos
 
 import (
 	"flag"
+	"fmt"
 
 	"github.com/PaloAltoNetworks/pango"
 )
@@ -37,7 +38,7 @@ func GetPanosClient(config *Config) (PanosClient, error) {
 	firewall := pango.Firewall{Client: pango.Client{Hostname: config.HostIp, ApiKey: config.ApiKey}}
 	err := firewall.Initialize()
 	if err != nil {
-		return nil, err
+		return nil, fmt.Errorf("error initializing firewall client: %w", err)
 	}
 	// Instantiate PanosFirewallClient
 	return &PanosFirewallClient{Firewall: firewall}, nil
diff --git a/x-pack/metricbeat/module/panos/vpn/gp_sessions.go b/x-pack/metricbeat/module/panos/vpn/gp_sessions.go
index ea1b8c31b6..af7d858fa1 100644
--- a/x-pack/metricbeat/module/panos/vpn/gp_sessions.go
+++ b/x-pack/metricbeat/module/panos/vpn/gp_sessions.go
@@ -6,73 +6,77 @@ package vpn
 
 import (
 	"encoding/xml"
+	"fmt"
 	"time"
 
 	"github.com/elastic/beats/v7/metricbeat/mb"
 	"github.com/elastic/elastic-agent-libs/mapstr"
 )
 
+const gpSessionsQuery = "<show><global-protect-gateway><current-user></current-user></global-protect-gateway></show>"
+
 func getGlobalProtectSessionEvents(m *MetricSet) ([]mb.Event, error) {
-	query := "<show><global-protect-gateway><current-user></current-user></global-protect-gateway></show>"
 	var response GPSessionsResponse
 
-	output, err := m.client.Op(query, vsys, nil, nil)
+	output, err := m.client.Op(gpSessionsQuery, vsys, nil, nil)
 	if err != nil {
-		m.logger.Error("Error: %s", err)
-		return nil, err
+		return nil, fmt.Errorf("error querying GlobalProtect sessions: %w", err)
 	}
 
 	err = xml.Unmarshal(output, &response)
 	if err != nil {
-		m.logger.Error("Error: %s", err)
-		return nil, err
+		return nil, fmt.Errorf("error unmarshaling GlobalProtect sessions response: %w", err)
 	}
 
 	events := formatGPSessionEvents(m, response.Result.Sessions)
 
 	return events, nil
-
 }
 
 func formatGPSessionEvents(m *MetricSet, sessions []GPSession) []mb.Event {
-	events := make([]mb.Event, 0, len(sessions))
+	if sessions == nil {
+		return nil
+	}
 
-	currentTime := time.Now()
+	events := make([]mb.Event, 0, len(sessions))
+	timestamp := time.Now()
 
 	for _, session := range sessions {
-		event := mb.Event{MetricSetFields: mapstr.M{
-			"globalprotect.domain":                 session.Domain,
-			"globalprotect.is_local":               session.IsLocal,
-			"globalprotect.username":               session.Username,
-			"globalprotect.rimary_username":        session.PrimaryUsername,
-			"globalprotect.region_for_config":      session.RegionForConfig,
-			"globalprotect.ource_region":           session.SourceRegion,
-			"globalprotect.computer":               session.Computer,
-			"globalprotect.client":                 session.Client,
-			"globalprotect.vpn_type":               session.VPNType,
-			"globalprotect.host_id":                session.HostID,
-			"globalprotect.app_version":            session.AppVersion,
-			"globalprotect.virtual_ip":             session.VirtualIP,
-			"globalprotect.virtual_ipv6":           session.VirtualIPv6,
-			"globalprotect.public_ip":              session.PublicIP,
-			"globalprotect.public_ipv6":            session.PublicIPv6,
-			"globalprotect.tunnel_type":            session.TunnelType,
-			"globalprotect.public_connection_ipv6": session.PublicConnectionIPv6,
-			"globalprotect.lient_ip":               session.ClientIP,
-			"globalprotect.login_time":             session.LoginTime,
-			"globalprotect.login_time_utc":         session.LoginTimeUTC,
-			"globalprotect.lifetime":               session.Lifetime,
-			"globalprotect.request_login":          session.RequestLogin,
-			"globalprotect.request_get_config":     session.RequestGetConfig,
-			"globalprotect.request_sslvpn_connect": session.RequestSSLVPNConnect,
-		},
+		event := mb.Event{
+			Timestamp: timestamp,
+			MetricSetFields: mapstr.M{
+				"globalprotect.domain":                 session.Domain,
+				"globalprotect.is_local":               session.IsLocal,
+				"globalprotect.username":               session.Username,
+				"globalprotect.primary_username":       session.PrimaryUsername,
+				"globalprotect.region_for_config":      session.RegionForConfig,
+				"globalprotect.source_region":          session.SourceRegion,
+				"globalprotect.computer":               session.Computer,
+				"globalprotect.client":                 session.Client,
+				"globalprotect.vpn_type":               session.VPNType,
+				"globalprotect.host_id":                session.HostID,
+				"globalprotect.app_version":            session.AppVersion,
+				"globalprotect.virtual_ip":             session.VirtualIP,
+				"globalprotect.virtual_ipv6":           session.VirtualIPv6,
+				"globalprotect.public_ip":              session.PublicIP,
+				"globalprotect.public_ipv6":            session.PublicIPv6,
+				"globalprotect.tunnel_type":            session.TunnelType,
+				"globalprotect.public_connection_ipv6": session.PublicConnectionIPv6,
+				"globalprotect.client_ip":              session.ClientIP,
+				"globalprotect.login_time":             session.LoginTime,
+				"globalprotect.login_time_utc":         session.LoginTimeUTC,
+				"globalprotect.lifetime":               session.Lifetime,
+				"globalprotect.request_login":          session.RequestLogin,
+				"globalprotect.request_get_config":     session.RequestGetConfig,
+				"globalprotect.request_sslvpn_connect": session.RequestSSLVPNConnect,
+			},
 			RootFields: mapstr.M{
 				"observer.ip":     m.config.HostIp,
 				"host.ip":         m.config.HostIp,
 				"observer.vendor": "Palo Alto",
 				"observer.type":   "firewall",
-				"@Timestamp":      currentTime,
-			}}
+			},
+		}
 
 		events = append(events, event)
 	}
diff --git a/x-pack/metricbeat/module/panos/vpn/gp_stats.go b/x-pack/metricbeat/module/panos/vpn/gp_stats.go
index f7177fe300..5907d784f2 100644
--- a/x-pack/metricbeat/module/panos/vpn/gp_stats.go
+++ b/x-pack/metricbeat/module/panos/vpn/gp_stats.go
@@ -6,6 +6,7 @@ package vpn
 
 import (
 	"encoding/xml"
+	"fmt"
 	"time"
 
 	"github.com/elastic/beats/v7/metricbeat/mb"
@@ -18,45 +19,48 @@ func getGlobalProtectStatsEvents(m *MetricSet) ([]mb.Event, error) {
 
 	output, err := m.client.Op(query, vsys, nil, nil)
 	if err != nil {
-		m.logger.Error("Error: %s", err)
-		return nil, err
+		return nil, fmt.Errorf("error querying GlobalProtect statistics: %w", err)
 	}
 
 	err = xml.Unmarshal(output, &response)
 	if err != nil {
-		m.logger.Error("Error: %s", err)
-		return nil, err
+		return nil, fmt.Errorf("error unmarshaling GlobalProtect statistics response: %w", err)
 	}
 
 	events := formatGPStatsEvents(m, response)
 
 	return events, nil
-
 }
 
 func formatGPStatsEvents(m *MetricSet, response GPStatsResponse) []mb.Event {
+	if len(response.Result.Gateways) == 0 {
+		return nil
+	}
+
 	events := make([]mb.Event, 0, len(response.Result.Gateways))
 
-	currentTime := time.Now()
+	timestamp := time.Now()
 	totalCurrent := response.Result.TotalCurrentUsers
 	totalPrevious := response.Result.TotalPreviousUsers
 
 	for _, gateway := range response.Result.Gateways {
-		event := mb.Event{MetricSetFields: mapstr.M{
-			"globalprotect.gateway.name":           gateway.Name,
-			"globalprotect.gateway.current_users":  gateway.CurrentUsers,
-			"globalprotect.gateway.previous_users": gateway.PreviousUsers,
-			"globalprotect.total_current_users":    totalCurrent,
-			"globalprotect.total_previous_users":   totalPrevious,
-		},
+		event := mb.Event{
+			Timestamp: timestamp,
+			MetricSetFields: mapstr.M{
+				"globalprotect.gateway.name":           gateway.Name,
+				"globalprotect.gateway.current_users":  gateway.CurrentUsers,
+				"globalprotect.gateway.previous_users": gateway.PreviousUsers,
+				"globalprotect.total_current_users":    totalCurrent,
+				"globalprotect.total_previous_users":   totalPrevious,
+			},
 			RootFields: mapstr.M{
 				"observer.ip":     m.config.HostIp,
 				"host.ip":         m.config.HostIp,
 				"observer.vendor": "Palo Alto",
 				"observer.type":   "firewall",
-				"@Timestamp":      currentTime,
-			}}
-
+			},
+		}
 		events = append(events, event)
 	}
 
diff --git a/x-pack/metricbeat/module/panos/vpn/tunnels.go b/x-pack/metricbeat/module/panos/vpn/tunnels.go
index 8dcb13a79e..1d22cc2625 100644
--- a/x-pack/metricbeat/module/panos/vpn/tunnels.go
+++ b/x-pack/metricbeat/module/panos/vpn/tunnels.go
@@ -6,6 +6,7 @@ package vpn
 
 import (
 	"encoding/xml"
+	"fmt"
 	"time"
 
 	"github.com/elastic/beats/v7/metricbeat/mb"
@@ -18,59 +19,55 @@ func getIPSecTunnelEvents(m *MetricSet) ([]mb.Event, error) {
 
 	output, err := m.client.Op(query, vsys, nil, nil)
 	if err != nil {
-		m.logger.Error("Error: %s", err)
-		return nil, err
+		return nil, fmt.Errorf("error querying IPSec tunnels: %w", err)
 	}
 
 	err = xml.Unmarshal(output, &response)
 	if err != nil {
-		m.logger.Error("Error: %s", err)
-		return nil, err
+		return nil, fmt.Errorf("error unmarshaling IPSec tunnels response: %w", err)
 	}
 
-	events := getEvents(m, response.Result.Entries)
+	events := formatIPSecTunnelEvents(m, response.Result.Entries)
 
 	return events, nil
-
 }
 
-func getEvents(m *MetricSet, entries []TunnelsEntry) []mb.Event {
+func formatIPSecTunnelEvents(m *MetricSet, entries []TunnelsEntry) []mb.Event {
 	events := make([]mb.Event, 0, len(entries))
-
-	currentTime := time.Now()
+	timestamp := time.Now()
 
 	for _, entry := range entries {
-		event := mb.Event{MetricSetFields: mapstr.M{
-			"ipsec_tunnel.id":         entry.ID,
-			"ipsec_tunnel.name":       entry.Name,
-			"ipsec_tunnel.gw":         entry.GW,
-			"ipsec_tunnel.TSi_ip":     entry.TSiIP,
-			"ipsec_tunnel.TSi_prefix": entry.TSiPrefix,
-			"ipsec_tunnel.TSi_proto":  entry.TSiProto,
-			"ipsec_tunnel.TSi_port":   entry.TSiPort,
-			"ipsec_tunnel.TSr_ip":     entry.TSrIP,
-			"ipsec_tunnel.TSr_prefix": entry.TSrPrefix,
-			"ipsec_tunnel.TSr_proto":  entry.TSrProto,
-			"ipsec_tunnel.TSr_port":   entry.TSrPort,
-			"ipsec_tunnel.proto":      entry.Proto,
-			"ipsec_tunnel.mode":       entry.Mode,
-			"ipsec_tunnel.dh":         entry.DH,
-			"ipsec_tunnel.enc":        entry.Enc,
-			"ipsec_tunnel.hash":       entry.Hash,
-			"ipsec_tunnel.life":       entry.Life,
-			"ipsec_tunnel.kb":         entry.KB,
-		},
+		event := mb.Event{
+			Timestamp: timestamp,
+			MetricSetFields: mapstr.M{
+				"ipsec_tunnel.id":         entry.ID,
+				"ipsec_tunnel.name":       entry.Name,
+				"ipsec_tunnel.gw":         entry.GW,
+				"ipsec_tunnel.TSi_ip":     entry.TSiIP,
+				"ipsec_tunnel.TSi_prefix": entry.TSiPrefix,
+				"ipsec_tunnel.TSi_proto":  entry.TSiProto,
+				"ipsec_tunnel.TSi_port":   entry.TSiPort,
+				"ipsec_tunnel.TSr_ip":     entry.TSrIP,
+				"ipsec_tunnel.TSr_prefix": entry.TSrPrefix,
+				"ipsec_tunnel.TSr_proto":  entry.TSrProto,
+				"ipsec_tunnel.TSr_port":   entry.TSrPort,
+				"ipsec_tunnel.proto":      entry.Proto,
+				"ipsec_tunnel.mode":       entry.Mode,
+				"ipsec_tunnel.dh":         entry.DH,
+				"ipsec_tunnel.enc":        entry.Enc,
+				"ipsec_tunnel.hash":       entry.Hash,
+				"ipsec_tunnel.life":       entry.Life,
+				"ipsec_tunnel.kb":         entry.KB,
+			},
 			RootFields: mapstr.M{
 				"observer.ip":     m.config.HostIp,
 				"host.ip":         m.config.HostIp,
 				"observer.vendor": "Palo Alto",
 				"observer.type":   "firewall",
-				"@Timestamp":      currentTime,
-			}}
-
+			},
+		}
 		events = append(events, event)
 	}
 
 	return events
-
 }
diff --git a/x-pack/metricbeat/module/panos/vpn/vpn.go b/x-pack/metricbeat/module/panos/vpn/vpn.go
index e3f428bbf5..d7582951c6 100644
--- a/x-pack/metricbeat/module/panos/vpn/vpn.go
+++ b/x-pack/metricbeat/module/panos/vpn/vpn.go
@@ -6,7 +6,7 @@ package vpn
 
 import (
 	"errors"
-	"strings"
+	"fmt"
 
 	"github.com/elastic/beats/v7/libbeat/common/cfgwarn"
 	"github.com/elastic/beats/v7/metricbeat/mb"
@@ -50,7 +50,6 @@ func New(base mb.BaseMetricSet) (mb.MetricSet, error) {
 
 	logger := logp.NewLogger(base.FullyQualifiedName())
 
-	//client := &pango.Firewall{Client: pango.Client{Hostname: config.HostIp, ApiKey: config.ApiKey}}
 	client, err := panos.GetPanosClient(config)
 	if err != nil {
 		return nil, err
@@ -68,44 +67,31 @@ func New(base mb.BaseMetricSet) (mb.MetricSet, error) {
 // format. It publishes the event which is then forwarded to the output. In case
 // of an error set the Error field of mb.Event or simply call report.Error().
 func (m *MetricSet) Fetch(report mb.ReporterV2) error {
-	// accumulate errs and report them all at the end so that we don't
-	// stop processing events if one of the fetches fails
-	var errs []string
-
-	gpSessionEvents, err := getGlobalProtectSessionEvents(m)
-	if err != nil {
-		m.logger.Error("Error get GlobalProtect session events: %s", err)
-		errs = append(errs, err.Error())
-	}
-
-	for _, event := range gpSessionEvents {
-		report.Event(event)
-	}
-
-	gpStatsEvents, err := getGlobalProtectStatsEvents(m)
-	if err != nil {
-		m.logger.Error("Error get GlobalProtect stats events: %s", err)
-		errs = append(errs, err.Error())
+	var errs []error
+
+	eventFetchers := []struct {
+		name string
+		fn   func(*MetricSet) ([]mb.Event, error)
+	}{
+		{"globalprotect session", getGlobalProtectSessionEvents},
+		{"globalprotect stats", getGlobalProtectStatsEvents},
+		{"ipsec tunnel", getIPSecTunnelEvents},
 	}
 
-	for _, event := range gpStatsEvents {
-		report.Event(event)
-	}
-
-	ipsecTunnelsEvents, err := getIPSecTunnelEvents(m)
-	if err != nil {
-		m.logger.Error("Error get IPSec Tunnel events: %s", err)
-		errs = append(errs, err.Error())
-	}
-
-	for _, event := range ipsecTunnelsEvents {
-		report.Event(event)
+	for _, fetcher := range eventFetchers {
+		events, err := fetcher.fn(m)
+		if err != nil {
+			m.logger.Errorf("Error getting %s events: %s", fetcher.name, err)
+			errs = append(errs, err)
+		} else {
+			for _, event := range events {
+				report.Event(event)
+			}
+		}
 	}
 
 	if len(errs) > 0 {
-		return errors.New(strings.Join(errs, "; "))
-	} else {
-		return nil
+		return fmt.Errorf("error while fetching vpn metrics: %w", errors.Join(errs...))
 	}
-
+	return nil
 }
